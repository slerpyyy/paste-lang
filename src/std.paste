# paste - standard library

# Stack manipulation:
;{ 1 copy } dup =
;{ dup ;_n = 1 < ;{ dup 1 _n - dup ;_n = } while pop } rep =
;{ _ = } pop =
# ;{ defer ;_x = defer ;_y = _x _y } xch =
;{ 2 copy pop } over =
;{ defer ;_x = _ = _x } under =

# Unary operators:
;{ 1 + } ++ =
;{ 1 xch - } -- =
;{ dup * } sq =
;{ 0 - } neg =
;{ 1 / } inv =

# Comparison operators:
;{ xch < } > =
;{ == ! } != =
;{ > ! } <= =
;{ < ! } >= =

# Boolean operators:
;{ ;0 ;1 ? } ! =
;{ ;do ;{ pop 0 } ? } && =
;{ ;{ pop 1 } ;do ? } || =

# Compound operators
;{ ;_op = dup do _op do xch = } map =
;{ dup defer ;_r = do + _r = } += =
;{ dup defer ;_r = do - _r = } -= =
;{ dup defer ;_r = do * _r = } *= =
;{ dup defer ;_r = do / _r = } /= =

# Basic math:
;{ / floor } div =
;{ xch 2 copy xch / floor * xch - } mod =
;{ 2 copy < ;xch if pop } min =
;{ 2 copy > ;xch if pop } max =
;{ dup 0 - max } abs =
;{ 0.5 + floor } round =
;{ neg floor neg } ceil =
;{ dup floor xch - } fract =

# Control flow:
;{ 0 exit } quit =
;{ -1 exit } abort =
# ;{ 1 xch ;{} ? } do =
# ;{ ;{} ? } if =
# ;{ defer dup do , ;while xch + ;{} ? } while =
